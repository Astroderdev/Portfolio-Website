<?xml version="1.0" encoding="utf-8"?><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 91 79"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <g id="Personal-1-mixed" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" transform="matrix(1, 0, 0, 1, 0.198992, 0.099496)">
    <g transform="translate(-824.000000, -1706.000000)" fill-rule="nonzero" id="services">
      <g transform="translate(350.000000, 1552.000000)">
        <g id="1-copy-3" transform="translate(356.000000, 109.000000)">
          <g id="web-programming" transform="translate(118.000000, 45.000000)">
            <path d="M90.1408451,8.64905468 L90.1408451,21.2096106 L0,21.2096106 L0,8.64905468 C0,3.87264796 3.93765024,0 8.79422879,0 L81.3466163,0 C86.2031948,0 90.1408451,3.87264796 90.1408451,8.64905468 Z" id="Path" fill="#F8EC7D" style="stroke: rgba(187, 218, 85, 0);"/>
            <g id="Group" transform="translate(0.000000, 7.953604)">
              <path d="M39.7303333,0.107413294 C41.5699072,0.113301286 43.0556511,1.57530671 43.0496575,3.3730197 C43.0436276,5.17073247 41.547578,6.6235061 39.7080041,6.61764893 C37.8684302,6.61175645 36.3826864,5.14975082 36.3886799,3.35203783 C36.3955686,1.55432505 37.8907592,0.102390636 39.7303333,0.107413294 Z" id="Path" fill="#E48E66" style="stroke: rgba(187, 218, 85, 0);"/>
              <path d="M90.1408451,13.7698765 L90.1408451,61.4646595 C90.1408451,66.2115615 86.2031948,70.0587678 81.3466163,70.0587678 L8.79422879,70.0587678 C3.93765024,70.0587678 0,66.2115615 0,61.4646595 L0,13.7698765 L90.1408451,13.7698765 Z" id="Path" fill="#EEC251" style="stroke: rgba(187, 218, 85, 0);"/>
              <path d="M24.7664034,0.0620811235 C26.6059773,0.0679806856 28.0925799,1.52998632 28.0865864,3.3276991 C28.0805565,5.12541209 26.5845071,6.57818572 24.744933,6.57232854 C22.905359,6.56643585 21.4187564,5.10443022 21.42475,3.30671744 C21.4273447,2.44311033 21.7811747,1.61559159 22.4072484,1.00712206 C23.0341806,0.398652537 23.8835451,0.0587488944 24.7664034,0.0620811235 Z" id="Path" fill="#E48E66" style="stroke: rgba(187, 218, 85, 0);"/>
              <path d="M9.80333224,0.0150821538 C11.6437651,0.0201424413 13.1312263,1.48214808 13.1252329,3.28070007 C13.1200618,5.07925227 11.6240124,6.53286512 9.78357953,6.52700793 C7.94314663,6.52195468 6.45568528,5.05994905 6.46167885,3.26139706 C6.46341474,2.39778973 6.81724482,1.5702712 7.44417726,0.960962248 C8.07110969,0.352492722 8.91961514,0.0117498648 9.80333224,0.0150821538 Z" id="Path" fill="#E48E66" style="stroke: rgba(187, 218, 85, 0);"/>
            </g>
          </g>
        </g>
      </g>
    </g>
    <rect x="12.736" y="33.564" width="2.388" height="29.351" style="fill: rgb(216, 216, 216); stroke-linejoin: round; stroke-linecap: round; stroke: rgba(187, 218, 85, 0);"/>
    <rect x="14.427" y="33.564" width="17.213" height="2.288" style="fill: rgb(216, 216, 216); stroke: rgba(0, 0, 0, 0);"/>
    <rect x="29.253" y="35.255" width="2.288" height="15.82" style="fill: rgb(216, 216, 216); stroke: rgba(0, 0, 0, 0);"/>
    <rect x="15.024" y="48.986" width="16.019" height="2.288" style="fill: rgb(216, 216, 216); stroke: rgba(0, 0, 0, 0);"/>
    <rect x="35.62" y="33.962" width="2.089" height="26.729" style="fill: rgb(216, 216, 216); stroke: rgba(0, 0, 0, 0);"/>
    <rect x="50.264" y="33.88" width="2.089" height="26.683" style="fill: rgb(216, 216, 216); stroke: rgba(0, 0, 0, 0);"/>
    <rect x="37.736" y="44.653" width="12.483" height="1.99" style="fill: rgb(216, 216, 216); stroke: rgba(0, 0, 0, 0);"/>
    <rect x="56.414" y="33.812" width="2.388" height="29.351" style="fill: rgb(216, 216, 216); stroke: rgba(0, 0, 0, 0);"/>
    <rect x="58.105" y="33.812" width="17.213" height="2.288" style="fill: rgb(216, 216, 216); stroke: rgba(0, 0, 0, 0);"/>
    <rect x="72.688" y="35.521" width="2.288" height="15.621" style="fill: rgb(216, 216, 216); stroke: rgba(0, 0, 0, 0);"/>
    <rect x="58.702" y="49.234" width="16.019" height="2.288" style="fill: rgb(216, 216, 216); stroke: rgba(0, 0, 0, 0);"/>
  </g>
</svg>